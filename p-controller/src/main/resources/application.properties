profile.name=${filter.profile.name}
url_addr = ${filter.url_addr}
login_url = ${filter.login_url}
login_web_url = ${filter.login_web_url}
unauthorizedUrl =  ${filter.unauthorizedUrl}
dubbo.address=${filter.dubbo.address}
dubbo.application.name=${filter.dubbo.application.name}
dubbo.timeout=${filter.dubbo.timeout}
dubbo.protocol=${filter.dubbo.protocol}
common.rjhost = ${filter.rjhost}

##访问地址
redis.host=${filter.redis.host}
##访问端口
redis.port=${filter.redis.port}
##注意，如果没有password，此处不设置值，但这一项要保留
redis.password=${filter.redis.password}

#最大能够保持idel状态的对象数
redis.maxIdle=${filter.redis.maxIdle}
redis.maxTotal=${filter.redis.maxTotal}
#连接池的最大数据库连接数。设为0表示无限制 最大分配的对象数
redis.maxActive=${filter.redis.maxActive}
redis.maxWaitMillis=${filter.redis.maxWaitMillis}
#每次最大连接数
redis.numTestsPerEvictionRun=${filter.redis.numTestsPerEvictionRun}
redis.expire=${filter.redis.expire}
redis.timeout=${filter.redis.timeout}
#连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true
redis.blockWhenExhausted=${filter.redis.blockWhenExhausted}
#获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1
redis.maxWait=${filter.redis.maxWait}
#在borrow一个jedis实例时，是否提前进行alidate操作；如果为true，则得到的jedis实例均是可用的；
redis.testOnBorrow=${filter.redis.testOnBorrow}
#jedis调用returnObject方法时，是否进行有效检查 #
redis.testOnReturn=${filter.redis.testOnReturn}
#在空闲时检查有效性, 默认false
redis.testWhileIdle=${filter.redis.testWhileIdle}
#表示idle object evitor两次扫描之间要sleep的毫秒数；
redis.timeBetweenEvictionRunsMillis=${filter.redis.timeBetweenEvictionRunsMillis}
#表示一个对象至少停留在idle状态的最短时间，
#然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；
#连接的最小空闲时间，连接池中连接可空闲的时间
redis.minEvictableIdleTimeMillis=${filter.redis.minEvictableIdleTimeMillis}

#连接空闲的最小时间,达到此值后空闲链接将会被移除,且保留“minIdle”个空闲连接数。
#如果minEvictableIdleTimeMillis>0，则此项设置无意义，且只有在timeBetweenEvictionRunsMillis大于0时才有意义；
redis.softMinEvictableIdleTimeMillis=${filter.redis.softMinEvictableIdleTimeMillis}

redis.database=${filter.redis.database}

redis.usePool=${filter.redis.usePool}

redis.enableTransactionSupport=${filter.redis.enableTransactionSupport}

jdbc.driverClassName = ${filter.jdbc.driverClassName}
jdbc.url = ${filter.jdbc.url}
jdbc.username = ${filter.jdbc.username}
jdbc.password = ${filter.jdbc.password}
jdbc.validationQuery = ${filter.jdbc.validationQuery}
jdbc.publickey=${filter.jdbc.publickey}

##### alipay #####
alipay.appid=${alipay.appid}
alipay.gateway=${alipay.gateway}
alipay.rsa.private_key=${alipay.rsa.private_key}
alipay.rsa.public_key=${alipay.rsa.public_key}
alipay.alipay_public_key=${alipay.alipay_public_key}
alipay.format=${alipay.format}
alipay.charset=${alipay.charset}
alipay.sign_type=${alipay.sign_type}
alipay.returnUrl=${alipay.returnUrl}
alipay.notifyUrl=${alipay.notifyUrl}
