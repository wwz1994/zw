<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
              <!-- 初始化连接大小 -->
              <property name="initialSize" value="100"/>
              <!-- 连接池最大使用连接数量 -->
              <property name="maxActive" value="150"/>
              <!-- 连接池最大空闲
              <property name="maxIdle" value="20" /> -->
              <property name="maxIdle" value="20" />
              <!-- 连接池最小空闲 -->
              <property name="minIdle" value="10"/>
              <!-- 获取连接最大等待时间 -->
              <property name="maxWait" value="60000"/>

              <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
              <property name="testOnBorrow" value="false"/>
              <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
              <property name="testOnReturn" value="false"/>
              <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
              <property name="testWhileIdle" value="true"/>
              <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
              <property name="timeBetweenEvictionRunsMillis" value="60000"/>
              <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
              <property name="minEvictableIdleTimeMillis" value="300000"/>
              <!-- 打开removeAbandoned功能 -->
              <!-- 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。
                  在上面的配置中，如果连接超过30分钟未关闭，
                  就会被强行回收，并且日志记录连接申请时的调用堆栈。 -->
              <property name="removeAbandoned" value="true"/>
              <!-- 超过时间限制多长 1800秒，也就是30分钟 -->
              <property name="removeAbandonedTimeout" value="180"/>
              <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。 -->
              <property name="maxOpenPreparedStatements" value="20"/>
              <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
              <property name="poolPreparedStatements" value="true"/>
              <!-- 指定每个PSCache连接上PSCache的大小 -->
              <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
              <!-- 关闭abanded连接时输出错误日志 -->
              <property name="logAbandoned" value="false"/>
              <!-- 监控数据库 -->
              <!-- 配置监控统计拦截的filters 去掉后监控界面sql无法统计
                 开启web监控、开启sql防火墙 -->
              <property name="filters" value="config,log4j,stat"></property>
              <property name="driverClassName" value="${jdbc.driverClassName}"/>
              <property name="url" value="${jdbc.url}"/>
              <property name="username" value="${jdbc.username}"/>
              <property name="password" value="${jdbc.password}"/>
              <property name="validationQuery" value="${jdbc.validationQuery}"/>
              <property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${jdbc.publickey}"/>
              
       </bean>
       <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource"/>
              <property name="mapperLocations" >
                     <array>
                            <value>classpath*:mapper/*.xml</value>
                     </array>
              </property>
              <property name="configLocation" value="classpath:config/mybatis-config.xml"></property>
             <!-- <property name="plugins">
                     <array>
                            <bean class="com.bus.interceptors.MapperInterceptor"></bean>
                     </array>
              </property>-->
       </bean>
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="com.bus.dao"/>
              <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
              <property name="sqlSessionFactoryBeanName" value="sqlSession"></property>
       </bean>

       <!-- 配置spring的PlatformTransactionManager，名字为默认值 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource" />
       </bean>

       <!-- 开启事务控制的注解支持jdk -->
       <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="false"/>


</beans>